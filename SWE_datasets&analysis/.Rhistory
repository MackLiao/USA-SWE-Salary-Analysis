)
)
)
)
)
)
# Transform the data of us_states to WGS84 to fit the package
us_states <- st_transform(us_states, 4326)
# Server for the shiny app
server <- function(input, output, session) {
# Create a reactive value to store the filtered states
filtered_states <- reactiveVal(us_states)
# Enable instant response by applying observe, update the sample filter
observe({
# Preset filters list
switch(input$presetFilter,
"No Filter" = {
updateNumericInput(session, "minSalaryAdjusted", value = 0)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = max(data$Rent, na.rm = TRUE))
},
"High Salary" = {
updateNumericInput(session, "minSalaryAdjusted", value = 100000)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
},
"Low Rent" = {
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = 1000)
},
{
updateNumericInput(session, "minSalaryAdjusted", value = 0)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = max(data$Rent, na.rm = TRUE))
}
)
})
# Enable manual filter
observeEvent(input$applyFilter, {
filtered_states(us_states) # Reset to original states when 'Filter' button is clicked
# Apply filters based on input values
if(!is.null(input$minSalaryAdjusted))
filtered_states(filtered_states() %>% filter(MeanSalaryAdjusted >= input$minSalaryAdjusted))
if(!is.null(input$maxSalaryAdjusted))
filtered_states(filtered_states() %>% filter(MeanSalaryAdjusted <= input$maxSalaryAdjusted))
if(!is.null(input$minRent))
filtered_states(filtered_states() %>% filter(Rent >= input$minRent))
if(!is.null(input$maxRent))
filtered_states(filtered_states() %>% filter(Rent <= input$maxRent))
# Add more filter conditions for other columns as needed
})
# Output the US map
output$map <- renderLeaflet({
# Define a color palette with a specified number of bins
bins <- 20
pal <- colorBin(palette = "viridis", domain = filtered_states()[[input$attribute]], bins = bins)
leaflet(data = filtered_states()) %>%
addTiles() %>%
# Make the US map at the center of the visualization
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addPolygons(fillColor = ~pal(filtered_states()[[input$attribute]]),
color = "#BDBDC3", weight = 1,
opacity = 1, fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE),
# Show the attributes of the corresponding state
popup = ~paste(
"<strong>State:</strong> ", STUSPS, "<br>",
"<strong>Mean Salary Adjusted:</strong> $", round(MeanSalaryAdjusted, 2), "<br>",
"<strong>Mean Salary Unadjusted:</strong> $", round(MeanSalaryUnadjusted, 2), "<br>",
"<strong>Mean Salary:</strong> $", round(MeanSalary, 2), "<br>",
"<strong>Number of Jobs:</strong> ", round(NumberJobs, 2), "<br>",
"<strong>Home Price:</strong> $", round(HomePrice, 2), "<br>",
"<strong>Living Cost:</strong> $", round(LivingCost, 2), "<br>",
"<strong>Rent:</strong> $", round(Rent, 2), "<br>",
"<strong>Plus Rent:</strong> $", round(PlusRent, 2), "<br>",
"<strong>Purchasing Power:</strong> ", round(PurPower, 2)
),
group = "states")
})
# Render a piece of text below the description table
output$text <- renderText({
"1. Attribute Selection:
Choose an attribute (e.g., Salary, Jobs, Cost) to visualize on the map. States will be colored based on the chosen attribute's value.
Color Gradation:
*Lighter Shades: Indicate higher values of the selected attribute.
*Darker Shades: Indicate lower values.
2. Value Filters:
*Minimum Value: Displays states with attribute values equal to or above this.
*Maximum Value: Displays states with attribute values equal to or below this.
3. Preset Filters:
Use preset filters for quick, predefined visualizations on the map. Selecting a preset automatically adjusts the value filters and updates the map accordingly."
})
# Render a description table below the map
output$description <- renderTable({
data.frame(
Description = c("Mean Salary Adjusted", "Mean Salary Unadjusted", "Mean Salary", "Number of Jobs", "Home Price", "Living Cost", "Rent", "Plus Rent", "Purchasing Power"),
Explanation = c("The average salary for software developers adjusted for cost of living differences between cities. (Number)",
"The average salary for software developers without adjusting for cost of living differences between cities. (Number)",
"The average salary for all occupations without adjusting for cost of living differences between cities. (Number)",
"The number of software developer jobs in the city. (Number)",
"The median home price in the city. (Number)",
"The average cost of living in the city. (Number)",
"The average rent in the city. (Number)",
"The average cost of living plus rent in the city. (Number)",
"The average local purchasing power in the city. (Number)")
)
}, rownames = FALSE)
# Output the line graph
output$linePlot <- renderPlot({
input$plotGraph
isolate({
ggplot(data, aes_string(x = input$attribute1, y = input$attribute2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(y = input$attribute2, x = input$attribute1) +
theme_minimal()
})
})
}
# Run the shiny application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(qrcode)
library(lattice)
library(wordcloud2)
library(shiny)
library(leaflet)
library(maps)
library(sf)
library(shinydashboard)
library(lubridate)
# Read the data from the formatted CSV file
data <- read.csv("CombinedDataFile.csv")
# Read the US geographical shapefile
us_states <- st_read("../US_geographic_dataset/cb_2018_us_state_20m.shp")
# Join combined data with shapefile by mapping State abbreviations
us_states <- us_states %>%
left_join(data, by = c("STUSPS" = "State"))
# UI for the shiny app
ui <- dashboardPage(
# Create a shiny dashboard titled SWE Salary Analysis
dashboardHeader(title = "SWE Salary Analysis"),
dashboardSidebar(
# Two visualization available, one is the US map, the other one is the Line graph
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("globe")),
menuItem("Line Graph", tabName = "line_graph", icon = icon("line-chart"))
)
),
dashboardBody(
tabItems(
# Sidebar items of the US map
tabItem(tabName = "map",
fluidRow(
column(width = 3,
# Select the gradation attribute
selectInput("attribute", "Choose an attribute:",
choices = colnames(data)[-1],
selected = colnames(data)[2]),
# Select the sample filter
selectInput("presetFilter", "Choose a preset filter:",
choices = c("No Filter", "High Salary", "Low Rent"),
selected = "No Filter"),
# Number input for filtering
numericInput("minSalaryAdjusted", "Min Mean SWE Salary:", min = 0, max = max(data$MeanSalaryAdjusted, na.rm = TRUE), value = 0),
numericInput("maxSalaryAdjusted", "Max Mean SWE Salary:", min = 0, max = max(data$MeanSalaryAdjusted, na.rm = TRUE), value = max(data$MeanSalaryAdjusted, na.rm = TRUE)),
numericInput("minRent", "Min Rent:", min = 0, max = max(data$Rent, na.rm = TRUE), value = 0),
numericInput("maxRent", "Max Rent:", min = 0, max = max(data$Rent, na.rm = TRUE), value = max(data$Rent, na.rm = TRUE)),
actionButton("applyFilter", "Filter")
),
column(width = 9,
leafletOutput("map"),
textOutput("text"),
tableOutput("description")
)
),
tableOutput("table")
),
# Create the line graph
tabItem(tabName = "line_graph",
fluidRow(
column(width = 3,
# Select the two attributes for the line graph
selectInput("attribute1", "Select Attribute 1:", choices = colnames(data)[-1]),
selectInput("attribute2", "Select Attribute 2:", choices = colnames(data)[-1]),
actionButton("plotGraph", "Plot Graph")
),
column(width = 9,
plotOutput("linePlot")
)
)
)
)
)
)
# Transform the data of us_states to WGS84 to fit the package
us_states <- st_transform(us_states, 4326)
# Server for the shiny app
server <- function(input, output, session) {
# Create a reactive value to store the filtered states
filtered_states <- reactiveVal(us_states)
# Enable instant response by applying observe, update the sample filter
observe({
# Preset filters list
switch(input$presetFilter,
# Reset the input data
"No Filter" = {
updateNumericInput(session, "minSalaryAdjusted", value = 0)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = max(data$Rent, na.rm = TRUE))
},
# Set the min mean salary to 100,000
"High Salary" = {
updateNumericInput(session, "minSalaryAdjusted", value = 100000)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
},
# Set the max rent to 1000
"Low Rent" = {
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = 1000)
},
{
updateNumericInput(session, "minSalaryAdjusted", value = 0)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = max(data$Rent, na.rm = TRUE))
}
)
})
# Enable manual filter
observeEvent(input$applyFilter, {
filtered_states(us_states) # Reset to original states when 'Filter' button is clicked
# Apply filters based on input values
if(!is.null(input$minSalaryAdjusted))
filtered_states(filtered_states() %>% filter(MeanSalaryAdjusted >= input$minSalaryAdjusted))
if(!is.null(input$maxSalaryAdjusted))
filtered_states(filtered_states() %>% filter(MeanSalaryAdjusted <= input$maxSalaryAdjusted))
if(!is.null(input$minRent))
filtered_states(filtered_states() %>% filter(Rent >= input$minRent))
if(!is.null(input$maxRent))
filtered_states(filtered_states() %>% filter(Rent <= input$maxRent))
# Add more filter conditions for other columns as needed
})
# Output the US map
output$map <- renderLeaflet({
# Define a color palette with a specified number of bins
bins <- 20
pal <- colorBin(palette = "viridis", domain = filtered_states()[[input$attribute]], bins = bins)
leaflet(data = filtered_states()) %>%
addTiles() %>%
# Make the US map at the center of the visualization
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addPolygons(fillColor = ~pal(filtered_states()[[input$attribute]]),
color = "#BDBDC3", weight = 1,
opacity = 1, fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE),
# Show the attributes of the corresponding state
popup = ~paste(
"<strong>State:</strong> ", STUSPS, "<br>",
"<strong>Mean Salary Adjusted:</strong> $", round(MeanSalaryAdjusted, 2), "<br>",
"<strong>Mean Salary Unadjusted:</strong> $", round(MeanSalaryUnadjusted, 2), "<br>",
"<strong>Mean Salary:</strong> $", round(MeanSalary, 2), "<br>",
"<strong>Number of Jobs:</strong> ", round(NumberJobs, 2), "<br>",
"<strong>Home Price:</strong> $", round(HomePrice, 2), "<br>",
"<strong>Living Cost:</strong> $", round(LivingCost, 2), "<br>",
"<strong>Rent:</strong> $", round(Rent, 2), "<br>",
"<strong>Plus Rent:</strong> $", round(PlusRent, 2), "<br>",
"<strong>Purchasing Power:</strong> ", round(PurPower, 2)
),
group = "states")
})
# Render a piece of text below the description table
output$text <- renderText({
"1. Attribute Selection:
Choose an attribute (e.g., Salary, Jobs, Cost) to visualize on the map. States will be colored based on the chosen attribute's value.
Color Gradation:
*Lighter Shades: Indicate higher values of the selected attribute.
*Darker Shades: Indicate lower values.
2. Value Filters:
*Minimum Value: Displays states with attribute values equal to or above this.
*Maximum Value: Displays states with attribute values equal to or below this.
3. Preset Filters:
Use preset filters for quick, predefined visualizations on the map. Selecting a preset automatically adjusts the value filters and updates the map accordingly."
})
# Render a description table below the map
output$description <- renderTable({
data.frame(
Description = c("Mean Salary Adjusted", "Mean Salary Unadjusted", "Mean Salary", "Number of Jobs", "Home Price", "Living Cost", "Rent", "Plus Rent", "Purchasing Power"),
Explanation = c("The average salary for software developers adjusted for cost of living differences between cities. (Number)",
"The average salary for software developers without adjusting for cost of living differences between cities. (Number)",
"The average salary for all occupations without adjusting for cost of living differences between cities. (Number)",
"The number of software developer jobs in the city. (Number)",
"The median home price in the city. (Number)",
"The average cost of living in the city. (Number)",
"The average rent in the city. (Number)",
"The average cost of living plus rent in the city. (Number)",
"The average local purchasing power in the city. (Number)")
)
}, rownames = FALSE)
# Output the line graph
output$linePlot <- renderPlot({
input$plotGraph
isolate({
ggplot(data, aes_string(x = input$attribute1, y = input$attribute2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(y = input$attribute2, x = input$attribute1) +
theme_minimal()
})
})
}
# Run the shiny application
shinyApp(ui = ui, server = server)
# Read the data from the formatted CSV file
data <- read.csv("CombinedDataFile.csv")
# Read the US geographical shapefile
us_states <- st_read("../US_geographic_dataset/cb_2018_us_state_20m.shp")
# Join combined data with shapefile by mapping State abbreviations
us_states <- us_states %>%
left_join(data, by = c("STUSPS" = "State"))
# UI for the shiny app
ui <- dashboardPage(
# Create a shiny dashboard titled SWE Salary Analysis
dashboardHeader(title = "SWE Salary Analysis"),
dashboardSidebar(
# Two visualization available, one is the US map, the other one is the Line graph
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("globe")),
menuItem("Line Graph", tabName = "line_graph", icon = icon("line-chart"))
)
),
dashboardBody(
tabItems(
# Sidebar items of the US map
tabItem(tabName = "map",
fluidRow(
column(width = 3,
# Select the gradation attribute
selectInput("attribute", "Choose an attribute:",
choices = colnames(data)[-1],
selected = colnames(data)[2]),
# Select the sample filter
selectInput("presetFilter", "Choose a preset filter:",
choices = c("No Filter", "High Salary", "Low Rent"),
selected = "No Filter"),
# Number input for filtering
numericInput("minSalaryAdjusted", "Min Mean SWE Salary:", min = 0, max = max(data$MeanSalaryAdjusted, na.rm = TRUE), value = 0),
numericInput("maxSalaryAdjusted", "Max Mean SWE Salary:", min = 0, max = max(data$MeanSalaryAdjusted, na.rm = TRUE), value = max(data$MeanSalaryAdjusted, na.rm = TRUE)),
numericInput("minRent", "Min Rent:", min = 0, max = max(data$Rent, na.rm = TRUE), value = 0),
numericInput("maxRent", "Max Rent:", min = 0, max = max(data$Rent, na.rm = TRUE), value = max(data$Rent, na.rm = TRUE)),
actionButton("applyFilter", "Filter")
),
column(width = 9,
leafletOutput("map"),
textOutput("text"),
tableOutput("description")
)
),
tableOutput("table")
),
# Create the line graph
tabItem(tabName = "line_graph",
fluidRow(
column(width = 3,
# Select the two attributes for the line graph
selectInput("attribute1", "Select Attribute 1:", choices = colnames(data)[-1]),
selectInput("attribute2", "Select Attribute 2:", choices = colnames(data)[-1]),
actionButton("plotGraph", "Plot Graph")
),
column(width = 9,
plotOutput("linePlot")
)
)
)
)
)
)
# Transform the data of us_states to WGS84 to fit the package
us_states <- st_transform(us_states, 4326)
# Server for the shiny app
server <- function(input, output, session) {
# Create a reactive value to store the filtered states
filtered_states <- reactiveVal(us_states)
# Enable instant response by applying observe, update the sample filter
observe({
# Preset filters list
switch(input$presetFilter,
# Reset the input data
"No Filter" = {
updateNumericInput(session, "minSalaryAdjusted", value = 0)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = max(data$Rent, na.rm = TRUE))
},
# Set the min mean salary to 100,000
"High Salary" = {
updateNumericInput(session, "minSalaryAdjusted", value = 100000)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
},
# Set the max rent to 1000
"Low Rent" = {
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = 1000)
},
{
updateNumericInput(session, "minSalaryAdjusted", value = 0)
updateNumericInput(session, "maxSalaryAdjusted", value = max(data$MeanSalaryAdjusted, na.rm = TRUE))
updateNumericInput(session, "minRent", value = 0)
updateNumericInput(session, "maxRent", value = max(data$Rent, na.rm = TRUE))
}
)
})
# Enable manual filter
observeEvent(input$applyFilter, {
filtered_states(us_states) # Reset to original states when 'Filter' button is clicked
# Apply filters based on input values
if(!is.null(input$minSalaryAdjusted))
filtered_states(filtered_states() %>% filter(MeanSalaryAdjusted >= input$minSalaryAdjusted))
if(!is.null(input$maxSalaryAdjusted))
filtered_states(filtered_states() %>% filter(MeanSalaryAdjusted <= input$maxSalaryAdjusted))
if(!is.null(input$minRent))
filtered_states(filtered_states() %>% filter(Rent >= input$minRent))
if(!is.null(input$maxRent))
filtered_states(filtered_states() %>% filter(Rent <= input$maxRent))
# Add more filter conditions for other columns as needed
})
# Output the US map
output$map <- renderLeaflet({
# Define a color palette with a specified number of bins
bins <- 20
pal <- colorBin(palette = "viridis", domain = filtered_states()[[input$attribute]], bins = bins)
leaflet(data = filtered_states()) %>%
addTiles() %>%
# Make the US map at the center of the visualization
fitBounds(-125, 24.396308, -66.934570, 49.384358) %>%
addPolygons(fillColor = ~pal(filtered_states()[[input$attribute]]),
color = "#BDBDC3", weight = 1,
opacity = 1, fillOpacity = 0.7,
highlight = highlightOptions(weight = 2,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE),
# Show the attributes of the corresponding state
popup = ~paste(
"<strong>State:</strong> ", STUSPS, "<br>",
"<strong>Mean Salary Adjusted:</strong> $", round(MeanSalaryAdjusted, 2), "<br>",
"<strong>Mean Salary Unadjusted:</strong> $", round(MeanSalaryUnadjusted, 2), "<br>",
"<strong>Mean Salary:</strong> $", round(MeanSalary, 2), "<br>",
"<strong>Number of Jobs:</strong> ", round(NumberJobs, 2), "<br>",
"<strong>Home Price:</strong> $", round(HomePrice, 2), "<br>",
"<strong>Living Cost:</strong> $", round(LivingCost, 2), "<br>",
"<strong>Rent:</strong> $", round(Rent, 2), "<br>",
"<strong>Plus Rent:</strong> $", round(PlusRent, 2), "<br>",
"<strong>Purchasing Power:</strong> ", round(PurPower, 2)
),
group = "states")
})
# Render a piece of text below the description table
output$text <- renderText({
"1. Attribute Selection:
Choose an attribute (e.g., Salary, Jobs, Cost) to visualize on the map. States will be colored based on the chosen attribute's value.
Color Gradation:
*Lighter Shades: Indicate higher values of the selected attribute.
*Darker Shades: Indicate lower values.
2. Value Filters:
*Minimum Value: Displays states with attribute values equal to or above this.
*Maximum Value: Displays states with attribute values equal to or below this.
3. Preset Filters:
Use preset filters for quick, predefined visualizations on the map. Selecting a preset automatically adjusts the value filters and updates the map accordingly."
})
# Render a description table below the map
output$description <- renderTable({
data.frame(
Description = c("Mean Salary Adjusted", "Mean Salary Unadjusted", "Mean Salary", "Number of Jobs", "Home Price", "Living Cost", "Rent", "Plus Rent", "Purchasing Power"),
Explanation = c("The average salary for software developers adjusted for cost of living differences between cities. (Number)",
"The average salary for software developers without adjusting for cost of living differences between cities. (Number)",
"The average salary for all occupations without adjusting for cost of living differences between cities. (Number)",
"The number of software developer jobs in the city. (Number)",
"The median home price in the city. (Number)",
"The average cost of living in the city. (Number)",
"The average rent in the city. (Number)",
"The average cost of living plus rent in the city. (Number)",
"The average local purchasing power in the city. (Number)")
)
}, rownames = FALSE)
# Output the line graph
output$linePlot <- renderPlot({
input$plotGraph
isolate({
ggplot(data, aes_string(x = input$attribute1, y = input$attribute2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(y = input$attribute2, x = input$attribute1) +
theme_minimal()
})
})
}
# Run the shiny application
shinyApp(ui = ui, server = server)
